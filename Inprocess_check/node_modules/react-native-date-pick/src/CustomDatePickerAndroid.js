// @flow
import React from 'react';
import { DatePickerAndroid, TimePickerAndroid } from 'react-native';

class CustomDatePickerAndroid extends React.Component {
  state = {
    date: new Date()
  };

  androidDatePicker = () =>
    new Promise(resolve => {
      DatePickerAndroid.open({ date: this.state.date })
        .then(response => {
          const { action, year, month, day } = response;
          if (action !== DatePickerAndroid.dismissedAction) {
            const date = this.state.date;
            date.setFullYear(year);
            date.setMonth(month);
            date.setDate(day);
            this.setState({ date });
            resolve();
          }
        })
        .catch(error => {
          const { message } = error;
          console.warn('Cannot open date picker', message);
        });
    });

  androidTimePicker = () =>
    new Promise(resolve => {
      TimePickerAndroid.open({
        hour: this.state.date.getHours(),
        minute: this.state.date.getMinutes(),
        is24Hour: true
      })
        .then(response => {
          const { action, hour, minute } = response;
          if (action !== TimePickerAndroid.dismissedAction) {
            const date = this.state.date;
            date.setHours(hour);
            date.setMinutes(minute);
            this.setState({ date });
            resolve();
          }
        })
        .catch(error => {
          const { message } = error;
          console.warn('Cannot open time picker', message);
        });
    });

  onPress = async () => {
    this.setState({ date: this.props.date ? this.props.date : new Date() });
    this.androidDatePicker().then(() => {
      this.androidTimePicker().then(() => {
        this.onSave();
      });
    });
  };

  onSave = () => {
    this.props.onSave(this.state.date);
  };

  render() {
    const Component = this.props.component;
    return <Component {...this.props} onPress={this.onPress} />;
  }
}
export default CustomDatePickerAndroid;
