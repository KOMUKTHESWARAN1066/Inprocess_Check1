// @flow
import React from 'react';
import {
  View,
  StyleSheet,
  Animated,
  TouchableWithoutFeedback
} from 'react-native';
import Interactable from 'react-native-interactable';

export class InteractableContainer extends React.PureComponent {
  state = {
    isVisible: false,
    dragging: false,
    dismissable: false
  };
  constructor(props: Props) {
    super(props);
    this._deltaY = new Animated.Value(props.height);
    this.backgroundColor = props.backgroundColor || 'white';
    this.puffer = props.puffer || 0;
  }

  show = () => {
    this.setState({ isVisible: true });
    this.drawer.snapTo({ index: 0 });
  };

  hide = () => {
    this.setState({ dismissable: true });
    this.drawer.snapTo({ index: 1 });
  };

  onDrag = (event: { nativeEvent: Object }) => {
    if (event.nativeEvent.state === 'start')
      this.setState({ dragging: true, dismissable: true });
    if (event.nativeEvent.state === 'end') this.setState({ dragging: false });
  };

  onAlert = event => {
    if (event.nativeEvent.myArea === 'leave' && this.state.dismissable) {
      this.setState({ isVisible: false }, this.props.onHide);
    }
  };

  /*
  onSave = async () => {
    if (this.props.onSave) await this.props.onSave();
    this.hide();
  };
  */

  ShadowLayer = (props: { color?: 'string | number' }) =>
    this.state.isVisible &&
    <TouchableWithoutFeedback onPress={() => this.hide()}>
      <Animated.View
        style={{
          flex: 1,
          backgroundColor: props.color ? props.color : 'black',
          opacity: this._deltaY.interpolate({
            inputRange: [0, this.props.height],
            outputRange: [0.4, 0]
          })
        }}
      />
    </TouchableWithoutFeedback>;

  render() {
    return (
      <View style={styles.container} pointerEvents={'box-none'}>
        <this.ShadowLayer color={this.props.color} />
        <Interactable.View
          ref={(component: Object) => (this.drawer = component)}
          verticalOnly
          initialPosition={{ y: this.props.height }}
          snapPoints={[
            { y: 0, id: 'open' },
            { y: this.props.height, id: 'close' }
          ]}
          boundaries={{
            top: -this.puffer,
            bottom: this.props.height
          }}
          animatedValueY={this._deltaY}
          onSnap={event => {
            if (!event.nativeEvent.index) {
              this.setState({ dismissable: true });
            }
          }}
          alertAreas={[
            { id: 'myArea', influenceArea: { bottom: this.props.height - 1 } }
          ]}
          onDrag={this.onDrag}
          onAlert={this.onAlert}
          animatedNativeDriver
          style={styles.container}
        >
          {!this.state.dragging && <this.ShadowLayer color={'transparent'} />}
          <View
            style={[
              styles.drawer,
              {
                height: this.props.height,
                backgroundColor: this.backgroundColor
              }
            ]}
          >
            {this.props.children}
          </View>
        </Interactable.View>
        <Animated.View
          style={[
            styles.pufferZone,
            {
              transform: [
                {
                  translateY: this._deltaY.interpolate({
                    inputRange: [-this.puffer, 0, 1],
                    outputRange: [0, this.puffer, this.puffer]
                  })
                }
              ],
              backgroundColor: this.backgroundColor,
              height: this.puffer
            }
          ]}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    justifyContent: 'flex-end'
  },
  drawerContainer: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0
  },
  drawer: {
    shadowOpacity: 0.15,
    shadowColor: 'black',
    shadowRadius: 15,
    shadowOffset: { width: 0, height: -1 },
    elevation: 2
  },
  pufferZone: {
    zIndex: 20,
    bottom: 0,
    left: 0,
    right: 0,
    position: 'absolute'
  }
});

export default InteractableContainer;
